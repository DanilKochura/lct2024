import time
from datetime import datetime
from telegram import ReplyKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

from solver_bot import solve_schedules_bot

bots = ["–ë—É—Ö—Ç–∞ –°–µ–≤–µ—Ä –∏ –î–∏–∫—Å–æ–Ω", "–î—É–¥–∏–Ω–∫–∞", "–∫—Ä–æ–º–∫–∞ –ª—å–¥–∞ –Ω–∞ –ó–∞–ø–∞–¥–µ", "–í–∞—Ä–∞–Ω–¥–µ–π-–ü—Ä–∏—Ä–∞–∑–ª–æ–º–Ω–æ–µ",
        "–®—Ç–æ–∫–º–∞–Ω", "–û–∫–Ω–æ –≤ –ï–≤—Ä–æ–ø—É", "–ü–æ–±–µ–¥–∞ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ", "–ö–∞—Ä—Å–∫–æ–µ - 3 (—Ü–µ–Ω—Ç—Ä)", "–ø—Ä–æ–ª–∏–≤ –í–∏–ª—å–∫–∏—Ü–∫–æ–≥–æ - 3",
        "–õ–∞–ø—Ç–µ–≤—ã—Ö - 4 (—é–≥)", "–í—Ö–æ–¥ –≤ –û–±—Å–∫—É—é –≥—É–±—É", "–ù–æ–≤—ã–π –ø–æ—Ä—Ç", "–õ–∞–ø—Ç–µ–≤—ã—Ö - 1 (—Ü–µ–Ω—Ç—Ä)",
        "–ö–∞—Ä—Å–∫–æ–µ - 1 (—Å–±–æ—Ä –∫–∞—Ä–∞–≤–∞–Ω–∞)", "–õ–µ—Å–∫–∏–Ω—Å–∫–æ–µ –º-–µ", "–ö–∞—Ä—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞", "–ú—ã—Å –ñ–µ–ª–∞–Ω–∏—è",
        "–æ—Å—Ç—Ä–æ–≤ –í—Ä–∞–Ω–≥–µ–ª—è", "–í–æ—Å—Ç–æ—á–Ω–æ-–°–∏–±–∏—Ä—Å–∫–æ–µ 1", "–ø—Ä–æ–ª–∏–≤ –í–∏–ª—å–∫–∏—Ü–∫–æ–≥–æ - –≤–æ—Å—Ç–æ–∫", "–ø—Ä–æ–ª–∏–≤ –í–∏–ª—å–∫–∏—Ü–∫–æ–≥–æ - –∑–∞–ø–∞–¥",
        "–æ–∫–æ–ª–æ –ù–æ–≤–æ–π –ó–µ–º–ª–∏", "–ü—Ä–æ–ª–∏–≤ –°–∞–Ω–Ω–∏–∫–æ–≤–∞ - 1", "–ü—Ä–æ–ª–∏–≤ –°–∞–Ω–Ω–∏–∫–æ–≤–∞ - 2", "—É—Å—Ç—å–µ –õ–µ–Ω—ã", "–°–∞–±–µ—Ç—Ç–∞", "–º—ã—Å.–ù–∞–≥–ª—ë–π–Ω—ã–Ω",
        "–ø—Ä–æ–ª–∏–≤ –õ–æ–Ω–≥–∞", "–í–æ—Å—Ç–æ—á–Ω–æ-–°–∏–±–∏—Ä—Å–∫–æ–µ 3", "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", "–õ–∞–ø—Ç–µ–≤—ã—Ö - 3 (–≤–æ—Å—Ç–æ–∫)", "–ú–û–¢ –ü–µ—á–æ—Ä–∞",
        "–•–∞—Ç–∞–Ω–≥—Å–∫–∏–π –∑–∞–ª–∏–≤", "–í–æ—Å—Ç–æ—á–Ω–æ-–°–∏–±–∏—Ä—Å–∫–æ–µ - 2 (–∑–∞–ø–∞–¥)", "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–µ-–†—É—Å–∞–Ω–æ–≤—Å–∫–æ–µ", "—Ç–µ—Ä–º–∏–Ω–∞–ª –£—Ç—Ä–µ–Ω–Ω–∏–π",
        "–¢–∞–π–º—ã—Ä—Å–∫–∏–π –∑–∞–ª–∏–≤", "–ë–µ—Ä–∏–Ω–≥–æ–≤–æ", "–∫—Ä–æ–º–∫–∞ –ª—å–¥–∞ –Ω–∞ –í–æ—Å—Ç–æ–∫–µ", "–†–µ–π–¥ –ü–µ–≤–µ–∫", "–õ–∞–ø—Ç–µ–≤—ã—Ö - 2 (—Ü–µ–Ω—Ç—Ä)", "–†–µ–π–¥ –ú—É—Ä–º–∞–Ω—Å–∫–∞",
        "–æ—Å—Ç—Ä–æ–≤ –ö–æ—Ç–µ–ª—å–Ω—ã–π", "–ö–∞—Ä—Å–∫–æ–µ - 2 (–ø—Ä–∏–±—Ä–µ–∂–Ω—ã–π)", "–ò–Ω–¥–∏–≥–∞", "–ë–µ—Ä–∏–Ω–≥–æ–≤ –ø—Ä–æ–ª–∏–≤", "–û–∫–Ω–æ –≤ –ê–∑–∏—é"
        ]

ports_buttons = [["–û–∫–Ω–æ –≤ –ï–≤—Ä–æ–ø—É", "–ù–æ–≤—ã–π –ø–æ—Ä—Ç", "–ø—Ä–æ–ª–∏–≤ –õ–æ–Ω–≥–∞"], ["–ò–Ω–¥–∏–≥–∞", "–î—É–¥–∏–Ω–∫–∞", "—É—Å—Ç—å–µ –õ–µ–Ω—ã"], ["–®—Ç–æ–∫–º–∞–Ω", "—Ç–µ—Ä–º–∏–Ω–∞–ª –£—Ç—Ä–µ–Ω–Ω–∏–π", "–ü–æ–±–µ–¥–∞ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ"]]

# –í–∞—à —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
TOKEN = '7350169585:AAGb_eAavS9G376d1ZHk0VECCIJ7pyVhXh8'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, SPEED, ICE_CLASS, DEPARTURE, DESTINATION, MONTH, DAY = range(7)

# –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
MONTHS = {
    '–Ø–Ω–≤–∞—Ä—å': 1,
    '–§–µ–≤—Ä–∞–ª—å': 2,
    '–ú–∞—Ä—Ç': 3,
    '–ê–ø—Ä–µ–ª—å': 4,
    '–ú–∞–π': 5,
    '–ò—é–Ω—å': 6,
    '–ò—é–ª—å': 7,
    '–ê–≤–≥—É—Å—Ç': 8,
    '–°–µ–Ω—Ç—è–±—Ä—å': 9,
    '–û–∫—Ç—è–±—Ä—å': 10,
    '–ù–æ—è–±—Ä—å': 11,
    '–î–µ–∫–∞–±—Ä—å': 12,
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞</b>:', parse_mode=ParseMode.HTML)
    return NAME

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ <b>—Å–∫–æ—Ä–æ—Å—Ç—å —Å—É–¥–Ω–∞</b> (—á–∏—Å–ª–æ):', parse_mode=ParseMode.HTML)
    return SPEED

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—É–¥–Ω–∞
async def get_speed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        speed = int(update.message.text)
    except ValueError:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ</b>.', parse_mode=ParseMode.HTML)
        return SPEED

    context.user_data['speed'] = speed
    ice_classes = [['–Ω–µ—Ç', 'Arc4', 'Arc5', 'Arc6', 'Arc7']]
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ <b>–ª–µ–¥–æ–≤—ã–π –∫–ª–∞—Å—Å</b> —Å—É–¥–Ω–∞:', reply_markup=ReplyKeyboardMarkup(ice_classes, one_time_keyboard=True), parse_mode=ParseMode.HTML)
    return ICE_CLASS

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–¥–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
async def get_ice_class(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    ice_class = update.message.text
    if ice_class not in ['–Ω–µ—Ç', 'Arc4', 'Arc5', 'Arc6', 'Arc7']:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–µ–¥–æ–≤—ã–π –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        return DEPARTURE
    context.user_data['ice_class'] = update.message.text
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ <b>–ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>:', reply_markup=ReplyKeyboardMarkup(ports_buttons, one_time_keyboard=True), parse_mode=ParseMode.HTML)
    return DEPARTURE

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def get_departure(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    departure = update.message.text
    if departure not in bots:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        return DEPARTURE
    context.user_data['departure'] = departure
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ <b>–ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>:', reply_markup=ReplyKeyboardMarkup(ports_buttons, one_time_keyboard=True), parse_mode=ParseMode.HTML)
    return DESTINATION

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
async def get_destination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    destination = update.message.text
    if destination not in bots:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        return DESTINATION
    context.user_data['destination'] = destination
    months = [['–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å'], ['–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç'], ['–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']]
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ <b>–º–µ—Å—è—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>:', reply_markup=ReplyKeyboardMarkup(months, one_time_keyboard=True), parse_mode=ParseMode.HTML)
    return MONTH

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def get_month(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['month'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ <b>–¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> (—á–∏—Å–ª–æ):', parse_mode=ParseMode.HTML)
    return DAY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
async def get_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        day = int(update.message.text)
        month = MONTHS[context.user_data['month']]
        year = 2022  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
        context.user_data['date_true'] = datetime(year, month, day)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
        context.user_data['day'] = day
    except (ValueError, KeyError):
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é <b>–¥–∞—Ç—É</b>.', parse_mode=ParseMode.HTML)
        return DAY

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—á–µ—Ç–∞
    loading_message = await update.message.reply_text('ü§ñ <i>–†–∞—Å—á–∏—Ç—ã–≤–∞—é....</i>', parse_mode=ParseMode.HTML)

    user_data = context.user_data
    await update.message.reply_text(
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞</b>: {user_data['name']}\n"
        f"<b>–°–∫–æ—Ä–æ—Å—Ç—å —Å—É–¥–Ω–∞</b>: {user_data['speed']}\n"
        f"<b>–õ–µ–¥–æ–≤—ã–π –∫–ª–∞—Å—Å</b>: {user_data['ice_class']}\n"
        f"<b>–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>: {user_data['departure']}\n"
        f"<b>–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>: {user_data['destination']}\n"
        f"<b>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>: {user_data['day']} {user_data['month']}",
        parse_mode=ParseMode.HTML
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ "—á–∞—Ç-—ç–∫—à–Ω" —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (typing)
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

    gant, routes = solve_schedules_bot(user_data['name'], user_data['ice_class'], user_data['speed'], user_data['departure'], user_data['destination'], user_data['date_true'])

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–†–∞—Å—á–∏—Ç—ã–≤–∞—é...."
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=loading_message.message_id)

    for route in routes:
        await update.message.reply_text(
            route,
            parse_mode=ParseMode.HTML
        )


    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(gant, 'rb'))

    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('<i>–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.</i>', parse_mode=ParseMode.HTML)
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SPEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_speed)],
            ICE_CLASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ice_class)],
            DEPARTURE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_departure)],
            DESTINATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_destination)],
            MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_month)],
            DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_day)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == '__main__':
    main()
